К плоской стене, представляющей плоскость XY, приклеено несколько сферических воздушных шаров. Воздушные шары представлены в виде двумерного целочисленного массива points, где points[i] = [xstart, xend]обозначает воздушный шар, горизонтальный диаметр которого простирается между xstart и xend . Вы не знаете точных координат Y воздушных шаров.

Стрелки можно стрелять прямо вертикально (в положительном направлении Y) из разных точек вдоль оси X. Воздушный шар с xstart и xend лопается от выстрела стрелы x, если xstart <= x <= xend . Нет ограничений на количество выпущенных стрел. Выпущенная стрела продолжает двигаться вверх бесконечно, разрывая все воздушные шары на своем пути. 
Учитывая массив points, верните минимальное количество стрел, которое необходимо выпустить, чтобы лопнуть все воздушные шары .

 

Пример 1:

Ввод: точки = [[10,16],[2,8],[1,6],[7,12]]
 Выход: 2
 Объяснение: Воздушные шары можно лопнуть двумя стрелками:
- Выстрелите стрелой в точку x = 6, лопнув шарики [2,8] и [1,6].
- Выстрелите стрелой в точку x = 11, лопнув шарики [10,16] и [7,12].
Пример 2:

Ввод: точки = [[1,2],[3,4],[5,6],[7,8]]
 Выход: 4
 Объяснение: Для каждого шарика нужно выпустить одну стрелу, всего получится 4 стрелы.
Пример 3:

Ввод: точки = [[1,2],[2,3],[3,4],[4,5]]
 Выход: 2
 Объяснение: Воздушные шары можно лопнуть двумя стрелками:
- Выстрелите стрелой в точку x = 2, лопнув шарики [1,2] и [2,3].
- Выстрелите стрелой в точку x = 4, лопнув шарики [3,4] и [4,5].
 

Ограничения:

1 <= points.length <= 10^5
points[i].length == 2
-2^31 <= xstart < xend <= 2^31 - 1
------------------------------------------------------------------------------------------------------------
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        # sort the points by the end coordinate
        points.sort(key = lambda x: x[1])
        arrow_count = 1
        current_start, current_end = points[0][0], points[0][1]
        
        # iterate through the remaining points
        for start, end in points[1:]:
            # if the start coordinate of the current point is after the end coordinate of the current interval,
            # increment arrow_count by 1 and update current_start and current_end
            if start > current_end:
                arrow_count += 1
                current_start, current_end = start, end
        
        return arrow_count
------------------------------------------------------------------------------------------------------------
Сначала мы сортируем список точек по конечной координате. Затем мы инициализируем переменную arrow_count значением 1 и устанавливаем начальную и конечную координаты первой точки как текущие начальную и конечную координаты.

Затем код перебирает оставшиеся точки в списке. Для каждой точки проверяется, находится ли начальная координата точки после конечной координаты текущего интервала. Если это так, он увеличивает стрелку_count на 1 и обновляет текущие начальные и конечные координаты до начальных и конечных координат текущей точки.

Наконец, после того, как все точки обработаны, метод возвращаетarrow_count.

Этот алгоритм работает, поскольку он обрабатывает точки в отсортированном порядке, и всякий раз, когда он встречает точку, не содержащуюся в текущем интервале, он увеличивает счетчик стрелок и обновляет текущий интервал до интервала текущей точки. Это гарантирует, что для взрыва всех шариков будет использовано минимальное количество стрел.
