    /*Реализовать рекурсивную функцию-шаблон для быстрой сортировки массивовпроизвольных числовых типов. Алгоритм быстрой сортировки, идея алгоритма быстрой сортировки состоит в следующем. Выбирается произвольный элемент внутри массива – «средний элемент». Массив при этом делится на две части. В левую часть помещаются элементы,меньшие, чем элемент, выбранный в качестве среднего, а в правую – большие. Это достигается путем просмотра массива попеременно с обоих концов, при этом каждый элемент сравнивается с выбранным средним, и элементы, находящиеся в «неподходящей» части, меняются местами. После завершения такой процедуры «разделения» средний элемент оказывается на своём окончательном месте. Далее процедуру разделения повторяют отдельно для правой и левой частей: в каждой части выбирается «среднее», относительно которого она делится на две и т.д. Разделение продолжается до тех пор, пока не окажется, что очередная обрабатываемая часть содержит ровно один элемент
    Ниже представлена рекурсивная реализация шаблона функции `quickSort` для быстрой сортировки массивов произвольных числовых типов в языке C++:
*/
#include <iostream>
#include <vector>

// Функция для обмена элементов массива
template <typename T>
void swap(T& a, T& b) {
    T temp = a;
    a = b;
    b = temp;
}

// Рекурсивная функция быстрой сортировки
template <typename T>
void quickSort(std::vector<T>& arr, int low, int high) {
    if (low < high) {
        // Выбираем произвольный элемент в качестве опорного
        T pivot = arr[high];

        // Индекс элемента, меньшего опорного
        int i = low - 1;

        // Перебираем элементы от low до high-1
        for (int j = low; j < high; j++) {
            // Если текущий элемент меньше или равен опорному, меняем их местами
            if (arr[j] <= pivot) {
                i++;
                swap(arr[i], arr[j]);
            }
        }

        // Помещаем опорный элемент на правильную позицию
        swap(arr[i + 1], arr[high]);

        // Рекурсивно сортируем левую и правую части массива
        quickSort(arr, low, i);
        quickSort(arr, i + 2, high);
    }
}

// Функция для вызова быстрой сортировки
template <typename T>
void quickSort(std::vector<T>& arr) {
    int size = arr.size();
    quickSort(arr, 0, size - 1);
}

int main() {
    std::vector<int> arr = {5, 2, 9, 1, 7, 6};

    std::cout << "Исходный массив: ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    // Вызываем быструю сортировку
    quickSort(arr);

    std::cout << "Отсортированный массив: ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}


    /* В этой реализации шаблон функции `quickSort` принимает вектор `arr`, а также границы `low` и `high` текущего сегмента массива для сортировки.

    Опорный элемент выбирается произвольно (в данном случае последний элемент сегмента `arr[high]`). Затем элементы сравниваются с опорным, и если элемент меньше или равен опорному, то он перемещается в левую часть массива, иначе он остается в правой части. После этого опорный элемент занимает свою окончательную позицию.

    Рекурсивно вызывается функция `quickSort` для левой ч

    асти массива (от `low` до `i`) и для правой части массива (от `i + 2` до `high`), пока размер сегмента больше одного элемента.

    В функции `main` создается исходный массив `arr`, который выводится на экран. Затем вызывается функция `quickSort`, после чего отсортированный массив выводится на экран.

    Пример вывода:

    Исходный массив: 5 2 9 1 7 6
    Отсортированный массив: 1 2 5 6 7 9


    Таким образом, рекурсивная функция-шаблон быстрой сортировки разделяет массив на подмассивы, сравнивает элементы и перемещает их до достижения конечного упорядоченного результата.
*/